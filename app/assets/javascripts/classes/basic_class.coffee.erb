@typeIsArray = Array.isArray || ( value ) -> return {}.toString.call( value ) is '[object Array]'
@_isSafari = ->
  navigator.userAgent.indexOf('Safari') != -1 and navigator.userAgent.indexOf('Chrome') == -1
@_isMobile = ->
  check = false
  ((a) ->
    if /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) or /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))
      check = true
    return
  ) navigator.userAgent or navigator.vendor or window.opera
  check


@mixOf = (mixins = []) ->
  class Mixed extends BasicClass
  for mixin in mixins by -1 #earlier mixins override later ones
    for name, method of mixin::
      Mixed::[name] = method
  Mixed

class @BasicClass

  constructor: (options)->
    @_beforeInit()
    @_initDefaults()
    @setOptions(options)
    @_initElements()
    @_extractOptions()
    @_initEvents()
    @_afterInit()

  _beforeInit: ->

  _initDefaults: ->
    @$container = $ document

  setOptions: (options = {}) ->
    @setOption(key, value) for key, value of options
    @_enableChain()

  setOption: (key, value) ->
    return if this[key] is value
    @_emit "change_#{key}", this[key], value
    this[key] = value

  _initElements: ->
  _extractOptions: ->
  _initEvents: ->
  _afterInit: ->

  _findElement: (selector) -> @$container.find(selector)

<% if Rails.env.development? %>
  _log: (values...) -> console.info(values...)
<% else %>
  _log: (values...) -> return
<% end %>

  _displayError: (message) -> alert(message || 'Something went wrong. Try again later.')

  _setValuesToUrlString: (url, values) ->
    resultUrl = url
    for key, value of values
      resultUrl = resultUrl.replace(":#{key}", value)
    resultUrl

  # custom events for basic class objects
  _enableChain: -> return this

  _emit: (event, args...) ->
    new Promise (resolve, reject) =>
      @_events ?= {}
      handler args... for handler in @_events[event] if @_events[event]?
      resolve()

  on: (event, handler) ->
    @_events ?= {}
    if typeof event is 'string'
      if event.match(/( )/)
        @on(e, handler) for e in event.split(' ')
      else
        @_events[event] ?= []
        @_events[event].push handler
    else if typeof event is 'object'
      @on(e, handler) for e in event
    @_enableChain()

  off: (event, handler) ->
    @_events ?= {}
    @_events[event].splice @_events[event].indexOf(handler), 1
    @_enableChain()

  once: (event, handler) ->
    fn = =>
      @off event, fn
      handler arguments...
    @on event, fn
    @_enableChain()

  offAllEvents: ->
    @_events = {}
    @_enableChain()

  _debounce: (func, threshold = 100, execAsap = no) ->
    timeout = null
    (args...) ->
      obj = this
      delayed = ->
        func.apply(obj, args) unless execAsap
        timeout = null
      if timeout
        clearTimeout(timeout)
      else if (execAsap)
        func.apply(obj, args)
      timeout = setTimeout delayed, threshold

  _assert: (message, test) ->
    if test
      console.log 'PASS', message
    else
      console.error 'ERROR', message

  _assertEquals: (message, got, expected) ->
    diff = (a, b) ->
      {
        got: a.filter((x) -> not b.includes(x))
        expected: b.filter((x) -> not a.includes(x))
      }
    isEquivalent = (a, b) ->
      aProps = Object.getOwnPropertyNames(a)
      bProps = Object.getOwnPropertyNames(b)
      if aProps.length != bProps.length
        console.error 'difference length', diff(aProps,bProps)
        return false
      i = 0
      while i < aProps.length
        propName = aProps[i]
        if typeof a[propName] is 'object' and typeof b[propName] is 'object'
          unless isEquivalent(a[propName], b[propName])
            console.error 'difference object', propName
            return false
        else if a[propName] != b[propName]
          console.error 'difference value', propName, a[propName], b[propName]
          return false
        i++
      true
    r = if typeof got is 'object' and typeof expected is 'object'
          isEquivalent(got, expected)
        else
          got is expected
    if r
      console.log "%cPASS #{message}", 'color: green;'
    else
      console.error 'ERROR', message, got, expected

  _crop = (float, x) ->
    float = parseFloat(float).toFixed(12)
    s = float + ''
    a = s.split('.')
    a[1] = a[1] or ''
    a[0] + '.' + a[1].substring(0, x)

  _prettyFloat: (float, digits = 8) ->
    parseFloat(@_prettyFloatString(float, digits))

  _prettyFloatString: (float, digits = 8, exacly = no) ->
    return parseInt(float) if digits is 0
    return 0 if typeof float is 'number' and (isNaN(float) or not isFinite(float))
    res = "#{_crop(float, digits)}".replace(/([0-9]+(\.[0-9]+[1-9])?)(\.?0+$)/,'$1')
    if exacly
      if digits <= 0
        parseInt(res)
      else
        parseFloat(res).toFixed(digits)
    else
      res

  _redrawLayout: ->
    if window.redrawLayoutTimeout
      clearTimeout(window.redrawLayoutTimeout)
    window.redrawLayoutTimeout = @_delay 0.05, =>
      $.when($.ready).then ->
        DesignLayout.redraw()
        window.redrawLayoutTimeout = null


  _delay: (seconds = 1, func = ->) -> setTimeout(func, seconds * 1000)

  _when: (condition) ->
    if condition
      Promise.resolve(condition)
    else
      Promise.reject(condition)

